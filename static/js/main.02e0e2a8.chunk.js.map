{"version":3,"sources":["Row.js","requests.js","App.js","serviceWorker.js","index.js"],"names":["Row","title","fetchUrl","useState","movies","setMovies","useEffect","a","axios","get","request","console","log","data","results","fetchData","className","map","movie","i","key","src","poster_path","alt","name","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetcthActionMovies","fetcthComedyMovies","fetcthHorrorMovies","fetcthRomanceMovies","fetcthDocumentaries","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTA2CeA,MApCf,YAAmC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EAEFC,mBAAS,IAFP,mBAEvBC,EAFuB,KAEfC,EAFe,KAgB9B,OAZAC,qBAAU,WAAI,4CACV,4BAAAC,EAAA,sEAC0BC,IAAMC,IAAIP,GADpC,cACUQ,EADV,OAEIC,QAAQC,IAAIF,EAAQG,KAAKC,SACzBT,EAAUK,EAAQG,KAAKC,SAH3B,kBAIWJ,GAJX,4CADU,uBAAC,WAAD,wBAQVK,KACD,CAACb,IAIA,yBAAKc,UAAU,OACX,4BAAKf,GACL,yBAAKe,UAAU,eAEVZ,EAAOa,KAAI,SAACC,EAAMC,GAAP,OACR,yBACIH,UAAU,aACVI,IAAK,SAASD,EACdE,IAAG,UA3BV,wCA2BU,OAAgBH,EAAMI,aACzBC,IAAKL,EAAMM,aCjC7BC,EAAU,mCA0BDC,EAXC,CACZC,cAAc,8BAAD,OAAgCF,GAC7CG,sBAAsB,wBAAD,OAA0BH,GAC/CI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,mBAAmB,0BAAD,OAA4BL,EAA5B,mBAClBM,mBAAmB,0BAAD,OAA4BN,EAA5B,mBAClBO,mBAAmB,0BAAD,OAA4BP,EAA5B,mBAClBQ,oBAAoB,0BAAD,OAA4BR,EAA5B,sBACnBS,oBAAoB,0BAAD,OAA4BT,EAA5B,oBCRRU,MAVf,WACE,OACE,yBAAKnB,UAAU,OACf,mDACA,kBAAC,EAAD,CAAKf,MAAM,oBAAoBC,SAAUwB,EAASE,wBAClD,kBAAC,EAAD,CAAK3B,MAAM,eAAeC,SAAUwB,EAASC,kBCE7BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.02e0e2a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import axios from './axios';\nimport axios from 'axios';\nimport \"./row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\n\nfunction Row({ title, fetchUrl }) {\n\n    const [movies, setMovies] = useState([]);\n\n    useEffect(()=>{\n        async function fetchData(){\n            const request = await axios.get(fetchUrl)\n            console.log(request.data.results);\n            setMovies(request.data.results)\n            return request;\n            \n        }\n        fetchData();\n    }, [fetchUrl]);\n    \n\n    return(\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {/*several row_posters*/}\n                {movies.map((movie,i) => (\n                    <img\n                        className=\"row_poster\"\n                        key={'movie_'+i} \n                        src={`${base_url}${movie.poster_path}`} \n                        alt={movie.name} \n                     />\n                ))}\n            </div>\n             {/* container -> posters */}\n        </div>\n    )\n}\n\n\nexport default Row;","const API_KEY = \"f2556456b7857fa3a4ba41804346890e\";\n\n\n// const requests ={\n//     fetchTrending: `/trending/all/week?api_key=${API_KEY}$language=en-US`,\n//     fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}$with_networks=213`,\n//     fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n//     fetcthActionMovies: `discover/movie?api_key=${API_KEY}$with_genres=28`,\n//     fetcthComedyMovies: `discover/movie?api_key=${API_KEY}$with_genres=35`,\n//     fetcthHorrorMovies: `discover/movie?api_key=${API_KEY}$with_genres=27`,\n//     fetcthRomanceMovies: `discover/movie?api_key=${API_KEY}$with_genres=10749`,\n//     fetcthDocumentaries: `discover/movie?api_key=${API_KEY}$with_genres=99`,\n// }\n\n\nconst requests ={\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetcthActionMovies: `discover/movie?api_key=${API_KEY}$with_genres=28`,\n    fetcthComedyMovies: `discover/movie?api_key=${API_KEY}$with_genres=35`,\n    fetcthHorrorMovies: `discover/movie?api_key=${API_KEY}$with_genres=27`,\n    fetcthRomanceMovies: `discover/movie?api_key=${API_KEY}$with_genres=10749`,\n    fetcthDocumentaries: `discover/movie?api_key=${API_KEY}$with_genres=99`,\n}\n\nexport default requests;\n// https://api.themoviedb.org/3/trending/all/week?api_key=f2556456b7857fa3a4ba41804346890e$language=en-US","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h1>hello, lets do this</h1>\n    <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} />\n    <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}